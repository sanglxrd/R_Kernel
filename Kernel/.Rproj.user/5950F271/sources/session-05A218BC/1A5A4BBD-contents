library(shiny)
library(leaflet)
library(shinycssloaders)
library(tidyverse)
library(sf)
library(rnaturalearth)

# Limpeza de ambiente
gc()
rm(list = ls())

# Dados carregados
CTF_BRASIL <- readxl::read_xlsx("./CTF2024/CTF_BRASIL_limpo.xlsx")
SISSOLO <- read.csv2("./BANCOS/BANC_SISSOLOv2.csv")


na_count <- sum(is.na(SISSOLO$NU_LONGITUDE))
print(na_count)


# Função para calcular a população proporcional dentro do raio de 1 km
calcula_populacao_proporcional <- function(area_municipio, populacao_municipio, area_raio = pi * (1^2)) {
  if (is.na(area_municipio) || is.na(populacao_municipio) || area_municipio == 0) {
    return(NA)
  }
  populacao_proporcional <- (area_raio / area_municipio) * populacao_municipio
  return(populacao_proporcional)
}

# Converter tipos corretamente
SISSOLO <- SISSOLO %>%
  mutate(
    AREA_KM2 = as.numeric(gsub(",", ".", AREA_KM2)),
    NU_LONGITUDE = as.numeric(gsub(",", ".", NU_LONGITUDE)),
    NU_LATITUDE = as.numeric(gsub(",", ".", NU_LATITUDE)),
    Populacao = as.numeric(Populacao)
  )
# Validar coordenadas
SISSOLO <- SISSOLO %>%
  filter(
    between(NU_LATITUDE, -33, 5),  # Limites típicos do Brasil
    between(NU_LONGITUDE, -74, -34)
  )

# Polígono simplificado do Brasil
brasil_polygon <- ne_countries(scale = "medium", returnclass = "sf") %>%
  filter(admin == "Brazil")

# Função para traduzir os códigos de UF
SISSOLO$UF <- as.character(SISSOLO$UF)
SISSOLO$UF <- case_when(
  SISSOLO$UF == "11" ~ "Rondônia",
  SISSOLO$UF == "12" ~ "Acre",
  SISSOLO$UF == "13" ~ "Amazonas",
  SISSOLO$UF == "14" ~ "Roraima",
  SISSOLO$UF == "15" ~ "Pará",
  SISSOLO$UF == "16" ~ "Amapá",
  SISSOLO$UF == "17" ~ "Tocantins",
  SISSOLO$UF == "21" ~ "Maranhão",
  SISSOLO$UF == "22" ~ "Piauí",
  SISSOLO$UF == "23" ~ "Ceará",
  SISSOLO$UF == "24" ~ "Rio Grande do Norte",
  SISSOLO$UF == "25" ~ "Paraíba",
  SISSOLO$UF == "26" ~ "Pernambuco",
  SISSOLO$UF == "27" ~ "Alagoas",
  SISSOLO$UF == "28" ~ "Sergipe",
  SISSOLO$UF == "29" ~ "Bahia",
  SISSOLO$UF == "31" ~ "Minas Gerais",
  SISSOLO$UF == "32" ~ "Espírito Santo",
  SISSOLO$UF == "33" ~ "Rio de Janeiro",
  SISSOLO$UF == "35" ~ "São Paulo",
  SISSOLO$UF == "41" ~ "Paraná",
  SISSOLO$UF == "42" ~ "Santa Catarina",
  SISSOLO$UF == "43" ~ "Rio Grande do Sul",
  SISSOLO$UF == "50" ~ "Mato Grosso do Sul",
  SISSOLO$UF == "51" ~ "Mato Grosso",
  SISSOLO$UF == "52" ~ "Goiás",
  SISSOLO$UF == "53" ~ "Distrito Federal",
  TRUE ~ SISSOLO$UF
)

# Criar a variável Região usando substr
SISSOLO$Regiao <- substr(SISSOLO$CO_MUNICIPIO_IBGE, 1, 1)
SISSOLO$Regiao <- recode(SISSOLO$Regiao,
                         "1" = "Norte",
                         "2" = "Nordeste",
                         "3" = "Sudeste",
                         "4" = "Sul",
                         "5" = "Centro-Oeste")


# Cor especial para pontos fora dos limites
cor_fora_limite <- "blue"

# Definição da interface do usuário (UI)
ui <- fluidPage(
  titlePanel(
    div(
      tags$img(src = 'logo.jpeg', height = '80px', style = "padding-right: 20px;"),
      span("Atlas de Vigilância em Saúde de Populações Expostas a Substâncias Químicas"),
      style = "display: flex; align-items: center; padding-top: 10px; padding-bottom: 10px;"
    )
  ),
  tabsetPanel(
    tabPanel(
      "CTF/APP",
      sidebarLayout(
        sidebarPanel(
          selectInput("regiao", "Selecione a Região:", c("Todos", unique(CTF_BRASIL$Região))),
          selectInput("estado", "Selecione o Estado:", choices = NULL, multiple = TRUE),
          selectizeInput("municipio", "Selecione o Município:", choices = NULL, multiple = TRUE),
          selectInput("potencial", "Selecione o Potencial Poluidor:", choices = c("Todos", unique(CTF_BRASIL$Potencial_de_Poluicao_da_atividade))),
          selectInput("categoria", "Selecione a Descrição da Categoria:", choices = c("Todos", unique(CTF_BRASIL$Descricao_da_categoria)), multiple = TRUE),
          selectInput("atividade", "Selecione a Descrição da Atividade:", choices = c("Todos", unique(CTF_BRASIL$Descricao_da_atividade)), multiple = TRUE),
          selectInput("situacao", "Selecione a Situação Cadastral:", choices = c("Todos", unique(CTF_BRASIL$Situacao_cadastral))),
          selectInput("coord_erro", "Selecione Coordenadas:", c("Todos", "Coordenadas com Erro", "Coordenadas sem Erro")),
          actionButton("filtrar", "Aplicar Filtros"),
          actionButton("limpar", "Limpar Filtros")
        ),
        mainPanel(
          withSpinner(leafletOutput("map"))
        )
      )
    ),
    tabPanel(
      "SISSOLO",
      sidebarLayout(
        sidebarPanel(
          selectInput("regiao_sissolo", "Selecione a Região:", choices = c("Todos", unique(SISSOLO$Regiao))),
          selectInput("uf_sissolo", "Selecione a UF:", choices = NULL),
          selectInput("municipio_sissolo", "Selecione o Município:", choices = NULL),
          selectInput("classificacao", "Classificação da Área:", choices = c("Todos", unique(SISSOLO$DS_SUBTIPO_CLASSIFICACAO))),
          selectInput("contaminante", "Contaminante:", choices = c("Todos", unique(SISSOLO$NO_CONTAMINANTE))),
          selectInput("coord_erro_sissolo", "Selecione Coordenadas:", c("Todos", "Coordenadas com Erro", "Coordenadas sem Erro")),
          actionButton("filtrar_sissolo", "Aplicar Filtros"),
          actionButton("limpar_sissolo", "Limpar Filtros")
        ),
        mainPanel(
          withSpinner(leafletOutput("sissolo_map"))
        )
      )
    ),
    tabPanel(
      "População Proporcional",
      sidebarLayout(
        sidebarPanel(
          selectInput("pop_regiao", "Selecione a Região:", choices = c("Todos", unique(SISSOLO$Regiao))),
          selectInput("pop_uf", "Selecione a UF:", choices = NULL),
          selectInput("pop_municipio", "Selecione o Município:", choices = NULL),
          actionButton("filtrar_populacao", "Aplicar Filtros")
        ),
        mainPanel(
          withSpinner(leafletOutput("pop_proporcional_map"))
        )
      )
    )
  )
)

# Servidor (Server)
server <- function(input, output, session) {
  
  # Funções de Limpeza de Filtros
  limparFiltros <- function() {
    updateSelectInput(session, "regiao", selected = "Todos")
    updateSelectInput(session, "estado", selected = NULL, choices = NULL)
    updateSelectizeInput(session, "municipio", selected = NULL, choices = NULL, server = TRUE)
    updateSelectInput(session, "potencial", selected = "Todos")
    updateSelectInput(session, "categoria", selected = "Todos")
    updateSelectInput(session, "atividade", selected = "Todos")
    updateSelectInput(session, "situacao", selected = "Todos")
    updateSelectInput(session, "coord_erro", selected = "Todos")
    output$map <- renderLeaflet({ leaflet() %>% addTiles() })
  }
  
  limparFiltrosSissolo <- function() {
    updateSelectInput(session, "regiao_sissolo", selected = "Todos")
    updateSelectInput(session, "uf_sissolo", selected = NULL, choices = NULL)
    updateSelectInput(session, "municipio_sissolo", selected = NULL, choices = NULL)
    updateSelectInput(session, "classificacao", selected = "Todos")
    updateSelectInput(session, "contaminante", selected = "Todos")
    updateSelectInput(session, "coord_erro_sissolo", selected = "Todos")
    output$sissolo_map <- renderLeaflet({ leaflet() %>% addTiles() })
  }
  
  # Observadores para Limpeza de Filtros
  observeEvent(input$limpar, { limparFiltros() })
  observeEvent(input$limpar_sissolo, { limparFiltrosSissolo() })
  
  # Atualização dos Select Inputs para a aba CTF/APP
  observeEvent(input$regiao, {
    estados <- if (input$regiao == "Todos") {
      unique(CTF_BRASIL$Estado)
    } else {
      unique(CTF_BRASIL$Estado[CTF_BRASIL$Região == input$regiao])
    }
    updateSelectInput(session, "estado", choices = c("Todos", estados))
  })
  
  observeEvent(input$estado, {
    municipios <- if ("Todos" %in% input$estado || is.null(input$estado)) {
      unique(CTF_BRASIL$Municipio[CTF_BRASIL$Região == input$regiao])
    } else {
      unique(CTF_BRASIL$Municipio[CTF_BRASIL$Estado %in% input$estado])
    }
    updateSelectizeInput(session, "municipio", choices = c("Todos", municipios), server = TRUE)
  })
  
  # Atualização dos Select Inputs para a aba SISSOLO
  observeEvent(input$regiao_sissolo, {
    ufs <- if (input$regiao_sissolo == "Todos") {
      unique(SISSOLO$UF)
    } else {
      unique(SISSOLO$UF[SISSOLO$Regiao == input$regiao_sissolo])
    }
    updateSelectInput(session, "uf_sissolo", choices = c("Todos", ufs))
  })
  
  observeEvent(input$uf_sissolo, {
    municipios <- if (input$uf_sissolo == "Todos" || is.null(input$uf_sissolo)) {
      unique(SISSOLO$Municipio[SISSOLO$Regiao == input$regiao_sissolo])
    } else {
      unique(SISSOLO$Municipio[SISSOLO$UF == input$uf_sissolo])
    }
    updateSelectInput(session, "municipio_sissolo", choices = c("Todos", municipios))
  })
  
  # Atualização dos Select Inputs para a aba População Proporcional
  observeEvent(input$pop_regiao, {
    ufs <- if (input$pop_regiao == "Todos") {
      unique(SISSOLO$UF)
    } else {
      unique(SISSOLO$UF[SISSOLO$Regiao == input$pop_regiao])
    }
    updateSelectInput(session, "pop_uf", choices = c("Todos", ufs))
  })
  
  observeEvent(input$pop_uf, {
    municipios <- if (input$pop_uf == "Todos" || is.null(input$pop_uf)) {
      unique(SISSOLO$Municipio[SISSOLO$Regiao == input$pop_regiao])
    } else {
      unique(SISSOLO$Municipio[SISSOLO$UF == input$pop_uf])
    }
    updateSelectInput(session, "pop_municipio", choices = c("Todos", municipios))
  })
  
  # Renderizar o mapa para a aba População Proporcional
  observeEvent(input$filtrar_populacao, {
    # Filtra os dados com base nos inputs selecionados
    data <- SISSOLO %>%
      filter(
        (input$pop_regiao == "Todos" | Regiao == input$pop_regiao) &
          (input$pop_uf == "Todos" | UF == input$pop_uf) &
          (input$pop_municipio == "Todos" | Municipio == input$pop_municipio)
      )
    
    # Limpeza das coordenadas antes de criar o objeto sf
    data <- clean_coordinates(data, "NU_LONGITUDE", "NU_LATITUDE")
    
    # Verificar se há dados válidos após limpeza
    if (nrow(data) > 0) {
      data_sf <- st_as_sf(data, coords = c("NU_LONGITUDE", "NU_LATITUDE"), crs = 4326, remove = FALSE)
      
      output$pop_proporcional_map <- renderLeaflet({
        leaflet(data = data_sf) %>%
          addTiles() %>%
          addCircleMarkers(
            lng = ~NU_LONGITUDE, lat = ~NU_LATITUDE,
            popup = ~paste("Endereço:", DS_ENDERECO, "<br>",
                           "População Proporcional:", round(calcula_populacao_proporcional(AREA_KM2, Populacao)), "habitantes"),
            radius = 5,
            color = cor_fora_limite,
            fillOpacity = 0.7
          ) %>%
          addCircles(
            lng = ~NU_LONGITUDE, lat = ~NU_LATITUDE,
            radius = 1000, weight = 1, color = "red"
          )
      })
    } else {
      output$pop_proporcional_map <- renderLeaflet({
        leaflet() %>% addTiles()
      })
    }
  })
  
  # Filtrar dados e remover valores ausentes ou inválidos
  clean_coordinates <- function(data, long_col, lat_col) {
    # Remover coordenadas inválidas ou ausentes
    data <- data %>%
      filter(!is.na(!!sym(long_col)) & !is.na(!!sym(lat_col))) %>%
      filter(is.numeric(!!sym(long_col)) & is.numeric(!!sym(lat_col)))
    
    # Verificar se ainda há dados válidos
    if (nrow(data) == 0) {
      showNotification("Nenhum dado com coordenadas válidas disponível após filtragem.", type = "warning")
    }
    
    return(data)
  }
  
  # Aplicar filtros e renderizar o mapa para a aba SISSOLO
  observeEvent(input$filtrar_sissolo, {
    data <- SISSOLO %>%
      filter(
        (input$regiao_sissolo == "Todos" | Regiao == input$regiao_sissolo) &
          (input$uf_sissolo == "Todos" | UF == input$uf_sissolo) &
          (input$municipio_sissolo == "Todos" | Municipio == input$municipio_sissolo) &
          (input$classificacao == "Todos" | DS_SUBTIPO_CLASSIFICACAO == input$classificacao) &
          (input$contaminante == "Todos" | NO_CONTAMINANTE == input$contaminante)
      )
    
    # Limpeza das coordenadas antes de criar o objeto sf
    data <- clean_coordinates(data, "NU_LONGITUDE", "NU_LATITUDE")
    
    # Verificar se há dados válidos após limpeza
    if (nrow(data) > 0) {
      # Identificar pontos fora do Brasil
      data_sf <- st_as_sf(data, coords = c("NU_LONGITUDE", "NU_LATITUDE"), crs = 4326, remove = FALSE)
      dentro_brasil <- st_within(data_sf, brasil_polygon, sparse = FALSE)
      data_sf$fora_brasil <- !dentro_brasil
      
      # Filtragem adicional para coordenadas com erro
      if (input$coord_erro_sissolo == "Coordenadas com Erro") {
        data_sf <- data_sf %>% filter(fora_brasil)
      } else if (input$coord_erro_sissolo == "Coordenadas sem Erro") {
        data_sf <- data_sf %>% filter(!fora_brasil)
      }
      
      output$sissolo_map <- renderLeaflet({
        leaflet(data = data_sf) %>%
          addTiles() %>%
          addCircleMarkers(
            lng = ~NU_LONGITUDE, lat = ~NU_LATITUDE,
            popup = ~paste("Endereço:", DS_ENDERECO, "<br>",
                           "Tamanho da Área:", NU_TAMANHO_AREA, "<br>",
                           "Código do Município:", CO_MUNICIPIO_IBGE, "<br>",
                           "Município:", Municipio, "<br>",
                           "UF:", UF),
            color = ~ifelse(fora_brasil, cor_fora_limite, "red"),
            radius = 5,
            fillOpacity = 0.7,
            clusterOptions = markerClusterOptions()
          )
      })
    } else {
      output$sissolo_map <- renderLeaflet({
        leaflet() %>% addTiles()
      })
    }
  })
  
  # Aplicar filtros e renderizar o mapa para a aba CTF/APP
  observeEvent(input$filtrar, {
    tryCatch({
      estados_filtrados <- if ("Todos" %in% input$estado || is.null(input$estado)) unique(CTF_BRASIL$Estado[CTF_BRASIL$Região == input$regiao]) else input$estado
      municipios_filtrados <- if ("Todos" %in% input$municipio || is.null(input$municipio)) unique(CTF_BRASIL$Municipio[CTF_BRASIL$Região == input$regiao & CTF_BRASIL$Estado %in% estados_filtrados]) else input$municipio
      categorias_filtradas <- if ("Todos" %in% input$categoria || is.null(input$categoria)) unique(CTF_BRASIL$Descricao_da_categoria) else input$categoria
      atividades_filtradas <- if ("Todos" %in% input$atividade || is.null(input$atividade)) unique(CTF_BRASIL$Descricao_da_atividade) else input$atividade
      
      # Filtrar dados de acordo com os inputs
      data <- CTF_BRASIL %>%
        filter(
          (input$regiao == "Todos" | Região == input$regiao) &
            (Estado %in% estados_filtrados) &
            (Municipio %in% municipios_filtrados) &
            (input$potencial == "Todos" | Potencial_de_Poluicao_da_atividade == input$potencial) &
            (Descricao_da_categoria %in% categorias_filtradas) &
            (Descricao_da_atividade %in% atividades_filtradas) &
            (input$situacao == "Todos" | Situacao_cadastral == input$situacao)
        )
      
      # Remover linhas com valores ausentes nas coordenadas
      data <- data %>% filter(!is.na(Longitude) & !is.na(Latitude))
      
      # Identificar pontos fora do Brasil
      data_sf <- st_as_sf(data, coords = c("Longitude", "Latitude"), crs = 4326, remove = FALSE)
      dentro_brasil <- st_within(data_sf, brasil_polygon, sparse = FALSE)
      data_sf$fora_brasil <- !dentro_brasil
      
      # Filtragem adicional para coordenadas com erro
      if (input$coord_erro == "Coordenadas com Erro") {
        data_sf <- data_sf %>% filter(fora_brasil)
      } else if (input$coord_erro == "Coordenadas sem Erro") {
        data_sf <- data_sf %>% filter(!fora_brasil)
      }
      
      # Verificar se ainda há dados após a filtragem
      if (nrow(data_sf) > 0) {
        output$map <- renderLeaflet({
          leaflet(data = data_sf) %>%
            addTiles() %>%
            addCircleMarkers(
              lng = ~Longitude, lat = ~Latitude,
              popup = ~paste("CNPJ:", CNPJ, "<br>",
                             "Município:", Municipio, "<br>",
                             "Estado:", Estado, "<br>",
                             "Potencial de Poluição:", Potencial_de_Poluicao_da_atividade, "<br>",
                             "Categoria:", Descricao_da_categoria, "<br>",
                             "Descrição da Atividade:", Descricao_da_atividade, "<br>",
                             "Situação Cadastral:", Situacao_cadastral),
              color = ~ifelse(fora_brasil, cor_fora_limite, "red"),
              radius = 5,
              fillOpacity = 0.7,
              clusterOptions = markerClusterOptions()
            )
        })
      } else {
        # Exibir mensagem intuitiva se não houver dados
        showNotification("Não há resultados para a pesquisa.", type = "warning")
        output$map <- renderLeaflet({
          leaflet() %>% addTiles()
        })
      }
    }, error = function(e) {
      showNotification(paste("Erro ao aplicar filtros:", e$message), type = "error")
    })
  })
  
  # Observador para calcular população proporcional ao clicar em um ponto no mapa
  observeEvent(input$pop_proporcional_map_marker_click, {
    click <- input$pop_proporcional_map_marker_click
    if (!is.null(click)) {
      # Identifica o ponto clicado
      lon <- click$lng
      lat <- click$lat
      
      # Filtra o município mais próximo com base nas coordenadas clicadas (exemplo simples)
      ponto <- SISSOLO %>%
        filter(
          near(NU_LONGITUDE, lon, tol = 0.01) &
            near(NU_LATITUDE, lat, tol = 0.01)
        ) %>%
        slice(1)
      
      if (nrow(ponto) > 0) {
        # Obtém os dados necessários
        area_municipio <- ponto$AREA_KM2
        populacao_municipio <- ponto$Populacao
        
        # Calcula a população proporcional
        populacao_proporcional <- calcula_populacao_proporcional(area_municipio, populacao_municipio)
        
        # Exibe a informação de população proporcional
        showNotification(
          paste("População proporcional dentro de 1 km de raio:", round(populacao_proporcional), "habitantes"),
          type = "message"
        )
      }
    }
  })
}

shinyApp(ui, server)

