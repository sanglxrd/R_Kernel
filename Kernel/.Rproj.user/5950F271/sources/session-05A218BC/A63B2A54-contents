Sys.setlocale("LC_ALL", "pt_BR.UTF-8")
setwd("F:/lucas.sanglard/OneDrive - Ministério da Saúde/Área de Trabalho/MAPEAMENTO")
gc(verbose = TRUE)
rm(list = ls())

library(shiny)
library(shinydashboardPlus)
library(shinyFiles)
library(magick)
library(leaflet)
library(sf)
library(dplyr)
library(readr)
library(tidyverse)
library(leaflet.extras)
library(shinycssloaders)
library(rnaturalearth)
library(rnaturalearthdata)

# Banco de dados
CTF_BRASIL <- readxl::read_xlsx("./CTF2024/CTF_BRASIL_limpo.xlsx")

# Carregar um polígono simplificado do Brasil
brasil_polygon <- ne_countries(scale = "medium", returnclass = "sf") %>%
  filter(admin == "Brazil")

# Interface do usuário (UI)
set.seed(42)

# UI usando dashboardPagePlus
ui <- dashboardPagePlus(
  header = dashboardHeaderPlus(
    title = tagList(
      tags$img(src = 'logo.jpeg', height = '40px', style = "padding-right: 10px;"), # Insert logo here
      span("Atlas de Vigilância em Saúde de Populações Expostas a Substâncias Químicas")
    ),
    tags$li(class = "dropdown",
            a(href = "mailto:vigipeq@saude.gov.br", icon("envelope"), "E-mail", class = "btn btn-success")),
    tags$li(class = "dropdown",
            a(href = "https://www.gov.br/saude/pt-br/composicao/svsa/saude-ambiental/vigipeq", icon("sitemap"), "Site", class = "btn btn-success")),
    tags$li(class = "dropdown",
            a(href = "https://www.youtube.com/channel/UC4-9kGjxQGTF-y0uBJy5RHQ", icon("youtube-square"), "YouTube", class = "btn btn-success")),
    tags$li(class = "dropdown",
            a(href = "#", icon("cog"), "Metodologia", class = "btn btn-warning"))
  ),
  
  sidebar = dashboardSidebar(
    sidebarMenu(
      menuItem("CTF/APP", tabName = "ctfapp", icon = icon("map")),
      menuItem("Mapa de Calor (CTF/APP)", tabName = "heatmap", icon = icon("fire")),
      menuItem("SISSOLO", tabName = "sissolo", icon = icon("globe"))
    )
  ),
  
  body = dashboardBody(
    tabItems(
      tabItem(tabName = "ctfapp",
              sidebarLayout(
                sidebarPanel(
                  selectInput("regiao", "Selecione a Região:", c("Todos", unique(CTF_BRASIL$Região))),
                  selectInput("estado", "Selecione o Estado:", choices = NULL),
                  selectizeInput("municipio", "Selecione o Município:", choices = NULL),
                  selectInput("potencial", "Selecione o Potencial Poluidor:", choices = c("Todos", unique(CTF_BRASIL$Potencial_de_Poluicao_da_atividade))),
                  selectInput("categoria", "Selecione a Descrição da Categoria:", choices = c("Todos", unique(CTF_BRASIL$Descricao_da_categoria))),
                  selectInput("situacao", "Selecione a Situação Cadastral:", choices = c("Todos", unique(CTF_BRASIL$Situacao_cadastral))),
                  selectInput("coord_erro", "Selecione Coordenadas:", c("Todos", "Coordenadas com Erro", "Coordenadas sem Erro")),
                  actionButton("filtrar", "Aplicar Filtros"),
                  actionButton("limpar", "Limpar Filtros")
                ),
                mainPanel(
                  withSpinner(leafletOutput("map"))
                )
              )
      ),
      tabItem(tabName = "heatmap",
              sidebarLayout(
                sidebarPanel(
                  selectInput("regiao_analise", "Selecione a Região:", c("Todos", unique(CTF_BRASIL$Região))),
                  selectInput("estado_analise", "Selecione o Estado:", choices = NULL),
                  selectizeInput("municipio_analise", "Selecione o Município:", choices = NULL),
                  selectInput("potencial_analise", "Selecione o Potencial Poluidor:", choices = c("Todos", unique(CTF_BRASIL$Potencial_de_Poluicao_da_atividade))),
                  selectInput("categoria_analise", "Selecione a Descrição da Categoria:", choices = c("Todos", unique(CTF_BRASIL$Descricao_da_categoria))),
                  selectInput("situacao_analise", "Selecione a Situação Cadastral:", choices = c("Todos", unique(CTF_BRASIL$Situacao_cadastral))),
                  actionButton("filtrar_analise", "Aplicar Filtros"),
                  actionButton("limpar_analise", "Limpar Filtros")
                ),
                mainPanel(
                  withSpinner(leafletOutput("heatmap"))
                )
              )
      ),
      tabItem(tabName = "sissolo",
              sidebarLayout(
                sidebarPanel(
                  selectInput("regiao_sissolo", "Selecione a Região:", c("Todos", unique(CTF_BRASIL$Região))),
                  selectInput("estado_sissolo", "Selecione o Estado:", choices = NULL),
                  selectizeInput("municipio_sissolo", "Selecione o Município:", choices = NULL),
                  selectInput("potencial_sissolo", "Selecione o Potencial Poluidor:", choices = c("Todos", unique(CTF_BRASIL$Potencial_de_Poluicao_da_atividade))),
                  selectInput("categoria_sissolo", "Selecione a Descrição da Categoria:", choices = c("Todos", unique(CTF_BRASIL$Descricao_da_categoria))),
                  selectInput("situacao_sissolo", "Selecione a Situação Cadastral:", choices = c("Todos", unique(CTF_BRASIL$Situacao_cadastral))),
                  actionButton("filtrar_sissolo", "Aplicar Filtros"),
                  actionButton("limpar_sissolo", "Limpar Filtros")
                ),
                mainPanel(
                  withSpinner(leafletOutput("sissolo_map"))
                )
              )
      )
    )
  ),
  
  # Remova o argumento `rightsidebar` ou mantenha-o se quiser configurá-lo futuramente
  footer = dashboardFooter(
    left = "Ministério da Saúde",
    right = "© 2024"
  ),
  
  title = "Atlas de Vigilância"
)  


# Defina as cores para as situações cadastrais
cores_situacao <- c("Ativa" = "green", "Suspensa para Averiguações" = "yellow", "Encerrado" = "red")

# Defina um conjunto de cores para as categorias (aqui usamos uma paleta básica, mas pode ser ajustada conforme necessário)
categorias_unicas <- unique(CTF_BRASIL$Descricao_da_categoria)
cores_categoria <- rainbow(length(categorias_unicas))
names(cores_categoria) <- categorias_unicas

# Cor especial para pontos fora dos limites
cor_fora_limite <- "blue"

server <- function(input, output, session) {
  # Função para limpar filtros
  limparFiltros <- function() {
    updateSelectInput(session, "regiao", selected = "Todos")
    updateSelectInput(session, "estado", selected = "Todos", choices = NULL)
    updateSelectizeInput(session, "municipio", selected = "Todos", choices = NULL, server = TRUE)
    updateSelectInput(session, "potencial", selected = "Todos")
    updateSelectInput(session, "categoria", selected = "Todos")
    updateSelectInput(session, "situacao", selected = "Todos")
    updateSelectInput(session, "coord_erro", selected = "Todos")
    output$map <- renderLeaflet({ leaflet() %>% addTiles() })
  }
  
  # Função para limpar filtros na aba de análise
  limparFiltrosAnalise <- function() {
    updateSelectInput(session, "regiao_analise", selected = "Todos")
    updateSelectInput(session, "estado_analise", selected = "Todos", choices = NULL)
    updateSelectizeInput(session, "municipio_analise", selected = "Todos", choices = NULL, server = TRUE)
    updateSelectInput(session, "potencial_analise", selected = "Todos")
    updateSelectInput(session, "categoria_analise", selected = "Todos")
    updateSelectInput(session, "situacao_analise", selected = "Todos")
    output$heatmap <- renderLeaflet({ leaflet() %>% addTiles() })
  }
  
  # Função para limpar filtros na aba SISSOLO
  limparFiltrosSissolo <- function() {
    updateSelectInput(session, "regiao_sissolo", selected = "Todos")
    updateSelectInput(session, "estado_sissolo", selected = "Todos", choices = NULL)
    updateSelectizeInput(session, "municipio_sissolo", selected = "Todos", choices = NULL, server = TRUE)
    updateSelectInput(session, "potencial_sissolo", selected = "Todos")
    updateSelectInput(session, "categoria_sissolo", selected = "Todos")
    updateSelectInput(session, "situacao_sissolo", selected = "Todos")
    output$sissolo_map <- renderLeaflet({ leaflet() %>% addTiles() })
  }
  
  observeEvent(input$limpar, { limparFiltros() })
  observeEvent(input$limpar_analise, { limparFiltrosAnalise() })
  observeEvent(input$limpar_sissolo, { limparFiltrosSissolo() })
  
  observeEvent(input$regiao, {
    estados <- if (input$regiao == "Todos") unique(CTF_BRASIL$Estado) else unique(CTF_BRASIL$Estado[CTF_BRASIL$Região == input$regiao])
    municipios <- if (input$regiao == "Todos") unique(CTF_BRASIL$Municipio) else unique(CTF_BRASIL$Municipio[CTF_BRASIL$Região == input$regiao])
    
    updateSelectInput(session, "estado", choices = c("Todos", estados))
    updateSelectizeInput(session, "municipio", choices = c("Todos", municipios), server = TRUE)
  })
  
  observeEvent(input$regiao_analise, {
    estados <- if (input$regiao_analise == "Todos") unique(CTF_BRASIL$Estado) else unique(CTF_BRASIL$Estado[CTF_BRASIL$Região == input$regiao_analise])
    municipios <- if (input$regiao_analise == "Todos") unique(CTF_BRASIL$Municipio) else unique(CTF_BRASIL$Municipio[CTF_BRASIL$Região == input$regiao_analise])
    
    updateSelectInput(session, "estado_analise", choices = c("Todos", estados))
    updateSelectizeInput(session, "municipio_analise", choices = c("Todos", municipios), server = TRUE)
  })
  
  observeEvent(input$regiao_sissolo, {
    estados <- if (input$regiao_sissolo == "Todos") unique(CTF_BRASIL$Estado) else unique(CTF_BRASIL$Estado[CTF_BRASIL$Região == input$regiao_sissolo])
    municipios <- if (input$regiao_sissolo == "Todos") unique(CTF_BRASIL$Municipio) else unique(CTF_BRASIL$Municipio[CTF_BRASIL$Região == input$regiao_sissolo])
    
    updateSelectInput(session, "estado_sissolo", choices = c("Todos", estados))
    updateSelectizeInput(session, "municipio_sissolo", choices = c("Todos", municipios), server = TRUE)
  })
  
  observeEvent(input$estado, {
    municipios <- if (input$estado == "Todos") unique(CTF_BRASIL$Municipio) else unique(CTF_BRASIL$Municipio[CTF_BRASIL$Estado == input$estado])
    
    updateSelectizeInput(session, "municipio", choices = c("Todos", municipios), server = TRUE)
  })
  
  observeEvent(input$estado_analise, {
    municipios <- if (input$estado_analise == "Todos") unique(CTF_BRASIL$Municipio) else unique(CTF_BRASIL$Municipio[CTF_BRASIL$Estado == input$estado_analise])
    
    updateSelectizeInput(session, "municipio_analise", choices = c("Todos", municipios), server = TRUE)
  })
  
  observeEvent(input$estado_sissolo, {
    municipios <- if (input$estado_sissolo == "Todos") unique(CTF_BRASIL$Municipio) else unique(CTF_BRASIL$Municipio[CTF_BRASIL$Estado == input$estado_sissolo])
    
    updateSelectizeInput(session, "municipio_sissolo", choices = c("Todos", municipios), server = TRUE)
  })
  
  # Aplicar filtros e renderizar o mapa de pontos sob demanda
  observeEvent(input$filtrar, {
    data <- CTF_BRASIL %>%
      filter(
        (input$regiao == "Todos" | Região == input$regiao) &
          (input$estado == "Todos" | Estado == input$estado) &
          (input$municipio == "Todos" | Municipio == input$municipio) &
          (input$potencial == "Todos" | Potencial_de_Poluicao_da_atividade == input$potencial) &
          (input$categoria == "Todos" | Descricao_da_categoria == input$categoria) &
          (input$situacao == "Todos" | Situacao_cadastral == input$situacao)
      )
    
    if (nrow(data) == 0) {
      showNotification("Nenhum dado encontrado para os filtros selecionados.", type = "warning")
      return(NULL)
    }
    
    colnames(data) <- make.names(colnames(data))
    data_sf <- st_as_sf(data, coords = c("Longitude", "Latitude"), crs = 4326, remove = FALSE)
    
    pontos_dentro_brasil <- st_within(data_sf, brasil_polygon, sparse = FALSE)
    
    if (input$coord_erro == "Coordenadas com Erro") {
      data_sf <- data_sf[!pontos_dentro_brasil, ]
    } else if (input$coord_erro == "Coordenadas sem Erro") {
      data_sf <- data_sf[pontos_dentro_brasil, ]
    }
    
    output$map <- renderLeaflet({
      leaflet(data = data_sf) %>%
        addTiles() %>%
        addCircleMarkers(
          lng = ~Longitude, lat = ~Latitude, 
          popup = ~paste("CNPJ:", CNPJ, "<br>", "Município:", Municipio, "<br>", Estado, "<br>", Potencial_de_Poluicao_da_atividade, "<br>", Descricao_da_categoria, "<br>", Situacao_cadastral),
          label = ~Situacao_cadastral,
          radius = 5,
          color = ~ifelse(Longitude %in% data_sf$Longitude[!pontos_dentro_brasil], cor_fora_limite, cores_situacao[Situacao_cadastral]),
          fillColor = ~cores_categoria[Descricao_da_categoria],
          fillOpacity = 0.7,
          clusterOptions = markerClusterOptions()
        )
    })
  })
  
  # Aplicar filtros e renderizar o mapa de calor sob demanda
  observeEvent(input$filtrar_analise, {
    data <- CTF_BRASIL %>%
      filter(
        (input$regiao_analise == "Todos" | Região == input$regiao_analise) &
          (input$estado_analise == "Todos" | Estado == input$estado_analise) &
          (input$municipio_analise == "Todos" | Municipio == input$municipio_analise) &
          (input$potencial_analise == "Todos" | Potencial_de_Poluicao_da_atividade == input$potencial_analise) &
          (input$categoria_analise == "Todos" | Descricao_da_categoria == input$categoria_analise) &
          (input$situacao_analise == "Todos" | Situacao_cadastral == input$situacao_analise)
      )
    
    if (nrow(data) == 0) {
      showNotification("Nenhum dado encontrado para os filtros selecionados.", type = "warning")
      return(NULL)
    }
    
    colnames(data) <- make.names(colnames(data))
    data_sf <- st_as_sf(data, coords = c("Longitude", "Latitude"), crs = 4326, remove = FALSE)
    
    output$heatmap <- renderLeaflet({
      leaflet(data = data_sf) %>%
        addTiles() %>%
        addHeatmap(
          lng = ~Longitude, lat = ~Latitude, 
          intensity = ~1,  # Todos os pontos têm a mesma intensidade
          blur = 20, max = 0.05, radius = 15
        )
    })
  })
  
  # Aplicar filtros e renderizar o mapa de SISSOLO sob demanda
  observeEvent(input$filtrar_sissolo, {
    data <- CTF_BRASIL %>%
      filter(
        (input$regiao_sissolo == "Todos" | Região == input$regiao_sissolo) &
          (input$estado_sissolo == "Todos" | Estado == input$estado_sissolo) &
          (input$municipio_sissolo == "Todos" | Municipio == input$municipio_sissolo) &
          (input$potencial_sissolo == "Todos" | Potencial_de_Poluicao_da_atividade == input$potencial_sissolo) &
          (input$categoria_sissolo == "Todos" | Descricao_da_categoria == input$categoria_sissolo) &
          (input$situacao_sissolo == "Todos" | Situacao_cadastral == input$situacao_sissolo)
      )
    
    if (nrow(data) == 0) {
      showNotification("Nenhum dado encontrado para os filtros selecionados.", type = "warning")
      return(NULL)
    }
    
    colnames(data) <- make.names(colnames(data))
    data_sf <- st_as_sf(data, coords = c("Longitude", "Latitude"), crs = 4326, remove = FALSE)
    
    output$sissolo_map <- renderLeaflet({
      leaflet(data = data_sf) %>%
        addTiles() %>%
        addCircleMarkers(
          lng = ~Longitude, lat = ~Latitude, 
          popup = ~paste("CNPJ:", CNPJ, "<br>", "Município:", Municipio, "<br>", Estado, "<br>", Potencial_de_Poluicao_da_atividade, "<br>", Descricao_da_categoria, "<br>", Situacao_cadastral),
          label = ~Situacao_cadastral,
          radius = 5,
          color = ~ifelse(Longitude %in% data_sf$Longitude[!pontos_dentro_brasil], cor_fora_limite, cores_situacao[Situacao_cadastral]),
          fillColor = ~cores_categoria[Descricao_da_categoria],
          fillOpacity = 0.7,
          clusterOptions = markerClusterOptions()
        )
    })
  })
}

shinyApp(ui, server)
