library(shiny)
library(leaflet)
library(shinycssloaders)
library(tidyverse)
library(sf)
library(rnaturalearth)

# Limpeza de ambiente
gc()
rm(list = ls())

# Dados carregados
CTF_BRASIL <- foreign::read.dbf("./BANCOS/CTF_CENSO_2022_FILTRO_DADOS.dbf")
SISSOLO <- read.csv2("./BANCOS/SISSOLO_01_10.csv", fileEncoding = "latin1")

# Função para calcular a população proporcional dentro do raio de 1 km
calcula_populacao_proporcional <- function(area_municipio, populacao_municipio, area_raio = pi * (1^2)) {
  if (is.na(area_municipio) || is.na(populacao_municipio) || area_municipio == 0) {
    return(NA)
  }
  populacao_proporcional <- (area_raio / area_municipio) * populacao_municipio
  return(populacao_proporcional)
}

# Converter tipos corretamente
SISSOLO <- SISSOLO %>%
  mutate(
    NU_LONGITUDE = as.numeric(gsub(",", ".", NU_LONGITUDE)),
    NU_LATITUDE = as.numeric(gsub(",", ".", NU_LATITUDE)),
    )

# Polígono simplificado do Brasil
brasil_polygon <- ne_countries(scale = "medium", returnclass = "sf") %>%
  filter(admin == "Brazil")

# Função para traduzir os códigos de UF

SISSOLO <- SISSOLO |> 
  mutate(UF = substr(CO_MUNICIPIO_IBGE,1,2))
  
SISSOLO$UF <- as.character(SISSOLO$UF)

SISSOLO$UF <- case_when(
  SISSOLO$UF == "11" ~ "Rondônia",
  SISSOLO$UF == "12" ~ "Acre",
  SISSOLO$UF == "13" ~ "Amazonas",
  SISSOLO$UF == "14" ~ "Roraima",
  SISSOLO$UF == "15" ~ "Pará",
  SISSOLO$UF == "16" ~ "Amapá",
  SISSOLO$UF == "17" ~ "Tocantins",
  SISSOLO$UF == "21" ~ "Maranhão",
  SISSOLO$UF == "22" ~ "Piauí",
  SISSOLO$UF == "23" ~ "Ceará",
  SISSOLO$UF == "24" ~ "Rio Grande do Norte",
  SISSOLO$UF == "25" ~ "Paraíba",
  SISSOLO$UF == "26" ~ "Pernambuco",
  SISSOLO$UF == "27" ~ "Alagoas",
  SISSOLO$UF == "28" ~ "Sergipe",
  SISSOLO$UF == "29" ~ "Bahia",
  SISSOLO$UF == "31" ~ "Minas Gerais",
  SISSOLO$UF == "32" ~ "Espírito Santo",
  SISSOLO$UF == "33" ~ "Rio de Janeiro",
  SISSOLO$UF == "35" ~ "São Paulo",
  SISSOLO$UF == "41" ~ "Paraná",
  SISSOLO$UF == "42" ~ "Santa Catarina",
  SISSOLO$UF == "43" ~ "Rio Grande do Sul",
  SISSOLO$UF == "50" ~ "Mato Grosso do Sul",
  SISSOLO$UF == "51" ~ "Mato Grosso",
  SISSOLO$UF == "52" ~ "Goiás",
  SISSOLO$UF == "53" ~ "Distrito Federal",
  TRUE ~ SISSOLO$UF
)

# Criar a variável Região usando substr
SISSOLO$Regiao <- substr(SISSOLO$CO_MUNICIPIO_IBGE, 1, 1)
SISSOLO$Regiao <- recode(SISSOLO$Regiao,
                         "1" = "Norte",
                         "2" = "Nordeste",
                         "3" = "Sudeste",
                         "4" = "Sul",
                         "5" = "Centro-Oeste")

# Cor especial para pontos fora dos limites
cor_fora_limite <- "blue"

# Definição da interface do usuário (UI)
ui <- fluidPage(
  titlePanel(
    div(
      tags$img(src = 'logo.jpeg', height = '80px', style = "padding-right: 10px;"),
      span("Atlas de Vigilância em Saúde de Populações Expostas a Substâncias Químicas"),
      style = "display: flex; align-items: center; padding-top: 10px; padding-bottom: 10px;"
    )
  ),
  tabsetPanel(
    tabPanel(
      "CTF/APP",
      sidebarLayout(
        sidebarPanel(
          selectInput("regiao", "Selecione a Região:", c("Todos", unique(CTF_BRASIL$Região))),
          selectInput("estado", "Selecione o Estado:", choices = NULL, multiple = TRUE),
          selectizeInput("municipio", "Selecione o Município:", choices = NULL, multiple = TRUE),
          selectInput("potencial", "Selecione o Potencial Poluidor:", choices = c("Todos", unique(CTF_BRASIL$Potencial_de_Poluicao_da_atividade))),
          selectInput("categoria", "Selecione a Descrição da Categoria:", choices = c("Todos", unique(CTF_BRASIL$Descricao_da_categoria)), multiple = TRUE),
          selectInput("atividade", "Selecione a Descrição da Atividade:", choices = c("Todos", unique(CTF_BRASIL$Descricao_da_atividade)), multiple = TRUE),
          selectInput("situacao", "Selecione a Situação Cadastral:", choices = c("Todos", unique(CTF_BRASIL$Situacao_cadastral))),
          selectInput("coord_erro", "Selecione Coordenadas:", c("Todos", "Coordenadas com Erro", "Coordenadas sem Erro")),
          actionButton("filtrar", "Aplicar Filtros"),
          actionButton("limpar", "Limpar Filtros")
        ),
        mainPanel(
          withSpinner(leafletOutput("map"))
        )
      )
    ),
    tabPanel(
      "SISSOLO",
      sidebarLayout(
        sidebarPanel(
          selectInput("regiao_sissolo", "Selecione a Região:", choices = c("Todos", unique(SISSOLO$Regiao))),
          selectInput("uf_sissolo", "Selecione a UF:", choices = NULL),
          selectInput("municipio_sissolo", "Selecione o Município:", choices = NULL),
          selectInput("classificacao", "Classificação da Área:", choices = c("Todos", unique(SISSOLO$DS_SUBTIPO_CLASSIFICACAO))),
          selectInput("contaminante", "Contaminante:", choices = c("Todos", unique(SISSOLO$NO_CONTAMINANTE))),
          selectInput("coord_erro_sissolo", "Selecione Coordenadas:", c("Todos", "Coordenadas com Erro", "Coordenadas sem Erro")),
          actionButton("filtrar_sissolo", "Aplicar Filtros"),
          actionButton("limpar_sissolo", "Limpar Filtros")
        ),
        mainPanel(
          withSpinner(leafletOutput("sissolo_map"))
        )
      )
    ),
    tabPanel(
      "População Proporcional - SISSOLO",
      sidebarLayout(
        sidebarPanel(
          selectInput("pop_regiao", "Selecione a Região:", choices = c("Todos", unique(SISSOLO$Regiao))),
          selectInput("pop_uf", "Selecione a UF:", choices = NULL),
          selectInput("pop_municipio", "Selecione o Município:", choices = NULL),
          selectInput("pop_contaminante", "Contaminante:", choices = c("Todos", unique(SISSOLO$NO_CONTAMINANTE)), multiple = TRUE),
          actionButton("filtrar_populacao", "Aplicar Filtros"),
          actionButton("limpar_populacao", "Limpar Filtros")
        ),
        mainPanel(
          withSpinner(leafletOutput("pop_proporcional_map"))
        )
      )
    ),
    tabPanel(
      "População Proporcional - CTF/APP",
      sidebarLayout(
        sidebarPanel(
          selectInput("pop_ctf_regiao", "Selecione a Região:", choices = c("Todos", unique(CTF_BRASIL$Região))),
          selectInput("pop_ctf_uf", "Selecione a UF:", choices = NULL),
          selectInput("pop_ctf_municipio", "Selecione o Município:", choices = NULL),
          selectInput("pop_ctf_categoria", "Descrição da Categoria:", choices = c("Todos", unique(CTF_BRASIL$Descricao_da_categoria)), multiple = TRUE),
          selectInput("pop_ctf_atividade", "Descrição da Atividade:", choices = c("Todos", unique(CTF_BRASIL$Descricao_da_atividade)), multiple = TRUE),
          selectInput("pop_ctf_potencial", "Potencial Poluidor:", choices = c("Todos", unique(CTF_BRASIL$Potencial_de_Poluicao_da_atividade))),
          actionButton("filtrar_populacao_ctf", "Aplicar Filtros"),
          actionButton("limpar_populacao_ctf", "Limpar Filtros")
        ),
        mainPanel(
          withSpinner(leafletOutput("pop_ctf_proporcional_map"))
        )
      )
    )
  )
)

# Servidor (Server)
server <- function(input, output, session) {
  
  # Funções de Limpeza de Filtros
  limparFiltros <- function() {
    updateSelectInput(session, "regiao", selected = "Todos")
    updateSelectInput(session, "estado", selected = NULL, choices = NULL)
    updateSelectizeInput(session, "municipio", selected = NULL, choices = NULL, server = TRUE)
    updateSelectInput(session, "potencial", selected = "Todos")
    updateSelectInput(session, "categoria", selected = "Todos")
    updateSelectInput(session, "atividade", selected = "Todos")
    updateSelectInput(session, "situacao", selected = "Todos")
    updateSelectInput(session, "coord_erro", selected = "Todos")
    output$map <- renderLeaflet({ leaflet() %>% addTiles() })
  }
  
  limparFiltrosSissolo <- function() {
    updateSelectInput(session, "regiao_sissolo", selected = "Todos")
    updateSelectInput(session, "uf_sissolo", selected = NULL, choices = NULL)
    updateSelectInput(session, "municipio_sissolo", selected = NULL, choices = NULL)
    updateSelectInput(session, "classificacao", selected = "Todos")
    updateSelectInput(session, "contaminante", selected = "Todos")
    updateSelectInput(session, "coord_erro_sissolo", selected = "Todos")
    output$sissolo_map <- renderLeaflet({ leaflet() %>% addTiles() })
  }
  
  limparFiltrosPopulacao <- function() {
    updateSelectInput(session, "pop_regiao", selected = "Todos")
    updateSelectInput(session, "pop_uf", selected = NULL, choices = NULL)
    updateSelectInput(session, "pop_municipio", selected = NULL, choices = NULL)
    updateSelectInput(session, "pop_contaminante", selected = "Todos")
    output$pop_proporcional_map <- renderLeaflet({ leaflet() %>% addTiles() })
  }
  
  limparFiltrosPopulacaoCTF <- function() {
    updateSelectInput(session, "pop_ctf_regiao", selected = "Todos")
    updateSelectInput(session, "pop_ctf_uf", selected = NULL, choices = NULL)
    updateSelectInput(session, "pop_ctf_municipio", selected = NULL, choices = NULL)
    updateSelectInput(session, "pop_ctf_categoria", selected = "Todos")
    updateSelectInput(session, "pop_ctf_atividade", selected = "Todos")
    updateSelectInput(session, "pop_ctf_potencial", selected = "Todos")
    output$pop_ctf_proporcional_map <- renderLeaflet({ leaflet() %>% addTiles() })
  }
  
  # Observadores para Limpeza de Filtros
  observeEvent(input$limpar, { limparFiltros() })
  observeEvent(input$limpar_sissolo, { limparFiltrosSissolo() })
  observeEvent(input$limpar_populacao, { limparFiltrosPopulacao() })
  observeEvent(input$limpar_populacao_ctf, { limparFiltrosPopulacaoCTF() })
  
  # Atualização dos Select Inputs para a aba CTF/APP
  observeEvent(input$regiao, {
    estados <- if (input$regiao == "Todos") {
      unique(CTF_BRASIL$Estado)
    } else {
      unique(CTF_BRASIL$Estado[CTF_BRASIL$Região == input$regiao])
    }
    updateSelectInput(session, "estado", choices = c("Todos", estados))
  })
  
  observeEvent(input$estado, {
    municipios <- if ("Todos" %in% input$estado || is.null(input$estado)) {
      unique(CTF_BRASIL$Municipio[CTF_BRASIL$Região == input$regiao])
    } else {
      unique(CTF_BRASIL$Municipio[CTF_BRASIL$Estado %in% input$estado])
    }
    updateSelectizeInput(session, "municipio", choices = c("Todos", municipios), server = TRUE)
  })
  
  # Atualização dos Select Inputs para a aba SISSOLO
  observeEvent(input$regiao_sissolo, {
    ufs <- if (input$regiao_sissolo == "Todos") {
      unique(SISSOLO$UF)
    } else {
      unique(SISSOLO$UF[SISSOLO$Regiao == input$regiao_sissolo])
    }
    updateSelectInput(session, "uf_sissolo", choices = c("Todos", ufs))
  })
  
  observeEvent(input$uf_sissolo, {
    municipios <- if (input$uf_sissolo == "Todos" || is.null(input$uf_sissolo)) {
      unique(SISSOLO$Municipio[SISSOLO$Regiao == input$regiao_sissolo])
    } else {
      unique(SISSOLO$Municipio[SISSOLO$UF == input$uf_sissolo])
    }
    updateSelectInput(session, "municipio_sissolo", choices = c("Todos", municipios))
  })
  
  # Atualização dos Select Inputs para a aba População Proporcional - SISSOLO
  observeEvent(input$pop_regiao, {
    ufs <- if (input$pop_regiao == "Todos") {
      unique(SISSOLO$UF)
    } else {
      unique(SISSOLO$UF[SISSOLO$Regiao == input$pop_regiao])
    }
    updateSelectInput(session, "pop_uf", choices = c("Todos", ufs))
  })
  
  observeEvent(input$pop_uf, {
    municipios <- if (input$pop_uf == "Todos" || is.null(input$pop_uf)) {
      unique(SISSOLO$Municipio[SISSOLO$Regiao == input$pop_regiao])
    } else {
      unique(SISSOLO$Municipio[SISSOLO$UF == input$pop_uf])
    }
    updateSelectInput(session, "pop_municipio", choices = c("Todos", municipios))
  })
  
  # Atualização dos Select Inputs para a aba População Proporcional - CTF/APP
  observeEvent(input$pop_ctf_regiao, {
    ufs <- if (input$pop_ctf_regiao == "Todos") {
      unique(CTF_BRASIL$Estado)
    } else {
      unique(CTF_BRASIL$Estado[CTF_BRASIL$Região == input$pop_ctf_regiao])
    }
    updateSelectInput(session, "pop_ctf_uf", choices = c("Todos", ufs))
  })
  
  observeEvent(input$pop_ctf_uf, {
    municipios <- if (input$pop_ctf_uf == "Todos" || is.null(input$pop_ctf_uf)) {
      unique(CTF_BRASIL$Municipio[CTF_BRASIL$Região == input$pop_ctf_regiao])
    } else {
      unique(CTF_BRASIL$Municipio[CTF_BRASIL$Estado == input$pop_ctf_uf])
    }
    updateSelectInput(session, "pop_ctf_municipio", choices = c("Todos", municipios))
  })
  
  # Renderizar o mapa para a aba População Proporcional - SISSOLO
  observeEvent(input$filtrar_populacao, {
    # Filtra os dados com base nos inputs selecionados
    data <- SISSOLO %>%
      filter(
        (input$pop_regiao == "Todos" | Regiao == input$pop_regiao) &
          (input$pop_uf == "Todos" | UF == input$pop_uf) &
          (input$pop_municipio == "Todos" | Municipio == input$pop_municipio) &
          (input$pop_contaminante == "Todos" | NO_CONTAMINANTE %in% input$pop_contaminante)
      )
    
    # Limpeza das coordenadas antes de criar o objeto sf
    data <- clean_coordinates(data, "NU_LONGITUDE", "NU_LATITUDE")
    
    # Verificar se há dados válidos após limpeza
    if (nrow(data) > 0) {
      data_sf <- st_as_sf(data, coords = c("NU_LONGITUDE", "NU_LATITUDE"), crs = 4326, remove = FALSE)
      
      output$pop_proporcional_map <- renderLeaflet({
        leaflet(data = data_sf) %>%
          addTiles() %>%
          addCircleMarkers(
            lng = ~NU_LONGITUDE, lat = ~NU_LATITUDE,
            popup = ~paste("Municipio:", Municipio, "<br>",
                           "UF:", UF, "<br>",
                           "Endereço:", DS_ENDERECO, "<br>",
                           "Código da área:", CO_AREA, "<br>",
                           "População propor. exposta:", round(calcula_populacao_proporcional(AREA_KM2, Populacao)), "habitantes"),
            radius = 5,
            color = cor_fora_limite,
            fillOpacity = 0.7
          ) %>%
          addCircles(
            lng = ~NU_LONGITUDE, lat = ~NU_LATITUDE,
            radius = 1000, weight = 1, color = "red"
          )
      })
    } else {
      output$pop_proporcional_map <- renderLeaflet({
        leaflet() %>% addTiles()
      })
    }
  })
  
  # Renderizar o mapa para a aba População Proporcional - CTF/APP
  observeEvent(input$filtrar_populacao_ctf, {
    data <- CTF_BRASIL %>%
      filter(
        (input$pop_ctf_regiao == "Todos" | Região == input$pop_ctf_regiao) &
          (input$pop_ctf_uf == "Todos" | Estado == input$pop_ctf_uf) &
          (input$pop_ctf_municipio == "Todos" | Municipio == input$pop_ctf_municipio) &
          (input$pop_ctf_categoria == "Todos" | Descricao_da_categoria %in% input$pop_ctf_categoria) &
          (input$pop_ctf_atividade == "Todos" | Descricao_da_atividade %in% input$pop_ctf_atividade) &
          (input$pop_ctf_potencial == "Todos" | Potencial_de_Poluicao_da_atividade == input$pop_ctf_potencial)
      )
    
    # Limpeza das coordenadas antes de criar o objeto sf
    data <- clean_coordinates(data, "Longitude", "Latitude")
    
    # Verificar se há dados válidos após limpeza
    if (nrow(data) > 0) {
      data_sf <- st_as_sf(data, coords = c("Longitude", "Latitude"), crs = 4326, remove = FALSE)
      
      output$pop_ctf_proporcional_map <- renderLeaflet({
        leaflet(data = data_sf) %>%
          addTiles() %>%
          addCircleMarkers(
            lng = ~Longitude, lat = ~Latitude,
            popup = ~paste("Municipio:", Municipio, "<br>",
                           "UF:", Estado, "<br>",
                           "Categoria:", Descricao_da_categoria, "<br>",
                           "Atividade:", Descricao_da_atividade, "<br>",
                           "Potencial Poluidor:", Potencial_de_Poluicao_da_atividade),
            radius = 5,
            color = cor_fora_limite,
            fillOpacity = 0.7
          ) %>%
          addCircles(
            lng = ~Longitude, lat = ~Latitude,
            radius = 1000, weight = 1, color = "red"
          )
      })
    } else {
      output$pop_ctf_proporcional_map <- renderLeaflet({
        leaflet() %>% addTiles()
      })
    }
  })
  
  # Filtrar dados e remover valores ausentes ou inválidos
  clean_coordinates <- function(data, long_col, lat_col) {
    # Remover coordenadas inválidas ou ausentes
    data <- data %>%
      filter(!is.na(!!sym(long_col)) & !is.na(!!sym(lat_col))) %>%
      filter(is.numeric(!!sym(long_col)) & is.numeric(!!sym(lat_col)))
    
    # Verificar se ainda há dados válidos
    if (nrow(data) == 0) {
      showNotification("Nenhum dado com coordenadas válidas disponível após filtragem.", type = "warning")
    }
    
    return(data)
  }
}

shinyApp(ui, server)

