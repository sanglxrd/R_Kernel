library(shiny)
library(leaflet)
library(shinycssloaders)
library(tidyverse)
library(sf)
library(rnaturalearth)

# Dados carregados
CTF_BRASIL <- readxl::read_xlsx("./CTF2024/CTF_BRASIL_limpo.xlsx")
SISSOLO <- read.csv("./Banco_SISSOLO/BANC_SISSOLO.csv", sep = ";")


# Função para calcular a população proporcional dentro do raio de 1 km
calcula_populacao_proporcional <- function(area_municipio, populacao_municipio, area_raio) {
  populacao_proporcional <- (area_raio / area_municipio) * populacao_municipio
  return(populacao_proporcional)
}


# Criar a variável Região usando substr
SISSOLO$Regiao <- substr(SISSOLO$CO_MUNICIPIO_IBGE, 1, 1)
SISSOLO$Regiao <- recode(SISSOLO$Regiao,
                         "1" = "Norte",
                         "2" = "Nordeste",
                         "3" = "Sudeste",
                         "4" = "Sul",
                         "5" = "Centro-Oeste")


# Polígono simplificado do Brasil
brasil_polygon <- ne_countries(scale = "medium", returnclass = "sf") %>%
  filter(admin == "Brazil")

# Cor especial para pontos fora dos limites
cor_fora_limite <- "blue"

# Definição da interface do usuário (UI)
ui <- fluidPage(
  titlePanel(
    div(
      tags$img(src = 'logo.jpeg', height = '80px', style = "padding-right: 20px;"),
      span("Atlas de Vigilância em Saúde de Populações Expostas a Substâncias Químicas"),
      style = "display: flex; align-items: center; padding-top: 10px; padding-bottom: 10px;"
    )
  ),
  tabsetPanel(
    tabPanel(
      "CTF/APP",
      sidebarLayout(
        sidebarPanel(
          selectInput("regiao", "Selecione a Região:", c("Todos", unique(CTF_BRASIL$Região))),
          selectInput("estado", "Selecione o Estado:", choices = NULL, multiple = TRUE),
          selectizeInput("municipio", "Selecione o Município:", choices = NULL, multiple = TRUE),
          selectInput("potencial", "Selecione o Potencial Poluidor:", choices = c("Todos", unique(CTF_BRASIL$Potencial_de_Poluicao_da_atividade))),
          selectInput("categoria", "Selecione a Descrição da Categoria:", choices = c("Todos", unique(CTF_BRASIL$Descricao_da_categoria)), multiple = TRUE),
          selectInput("atividade", "Selecione a Descrição da Atividade:", choices = c("Todos", unique(CTF_BRASIL$Descricao_da_atividade)), multiple = TRUE),
          selectInput("situacao", "Selecione a Situação Cadastral:", choices = c("Todos", unique(CTF_BRASIL$Situacao_cadastral))),
          selectInput("coord_erro", "Selecione Coordenadas:", c("Todos", "Coordenadas com Erro", "Coordenadas sem Erro")),
          actionButton("filtrar", "Aplicar Filtros"),
          actionButton("limpar", "Limpar Filtros")
        ),
        mainPanel(
          withSpinner(leafletOutput("map"))
        )
      )
    ),
    tabPanel(
      "SISSOLO",
      sidebarLayout(
        sidebarPanel(
          selectInput("regiao_sissolo", "Selecione a Região:", choices = c("Todos", unique(SISSOLO$Regiao))),
          selectInput("uf_sissolo", "Selecione a UF:", choices = c("Todos", unique(SISSOLO$UF))),
          selectInput("municipio_sissolo", "Selecione o Município:", choices = c("Todos", unique(SISSOLO$Municipio))),
          selectInput("classificacao", "Classificação da Área:", choices = c("Todos", unique(SISSOLO$DS_SUBTIPO_CLASSIFICACAO))),
          selectInput("contaminante", "Contaminante:", choices = c("Todos", unique(SISSOLO$NO_CONTAMINANTE))),
          selectInput("coord_erro_sissolo", "Selecione Coordenadas:", c("Todos", "Coordenadas com Erro", "Coordenadas sem Erro")),
          actionButton("filtrar_sissolo", "Aplicar Filtros"),
          actionButton("limpar_sissolo", "Limpar Filtros")
        ),
        mainPanel(
          withSpinner(leafletOutput("sissolo_map"))
        )
      )
    )
  )
)

# Servidor (Server)
server <- function(input, output, session) {
  
  # Funções de Limpeza de Filtros
  limparFiltros <- function() {
    updateSelectInput(session, "regiao", selected = "Todos")
    updateSelectInput(session, "estado", selected = NULL, choices = NULL)
    updateSelectizeInput(session, "municipio", selected = NULL, choices = NULL, server = TRUE)
    updateSelectInput(session, "potencial", selected = "Todos")
    updateSelectInput(session, "categoria", selected = "Todos")
    updateSelectInput(session, "atividade", selected = "Todos")
    updateSelectInput(session, "situacao", selected = "Todos")
    updateSelectInput(session, "coord_erro", selected = "Todos")
    output$map <- renderLeaflet({ leaflet() %>% addTiles() })
  }
  
  limparFiltrosSissolo <- function() {
    updateSelectInput(session, "regiao_sissolo", selected = "Todos")
    updateSelectInput(session, "classificacao", selected = "Todos")
    updateSelectInput(session, "contaminante", selected = "Todos")
    updateSelectInput(session, "coord_erro_sissolo", selected = "Todos")
    output$sissolo_map <- renderLeaflet({ leaflet() %>% addTiles() })
  }
  
  # Observadores para Limpeza de Filtros
  observeEvent(input$limpar, { limparFiltros() })
  observeEvent(input$limpar_sissolo, { limparFiltrosSissolo() })
  
  # Atualização dos Select Inputs para a aba CTF/APP
  observeEvent(input$regiao, {
    estados <- if (input$regiao == "Todos") {
      unique(CTF_BRASIL$Estado)
    } else {
      unique(CTF_BRASIL$Estado[CTF_BRASIL$Região == input$regiao])
    }
    updateSelectInput(session, "estado", choices = c("Todos", estados))
    
    # Atualizar os municípios com base na região selecionada
    if (input$regiao != "Todos") {
      municipios <- unique(CTF_BRASIL$Municipio[CTF_BRASIL$Região == input$regiao])
    } else {
      municipios <- unique(CTF_BRASIL$Municipio)
    }
    updateSelectizeInput(session, "municipio", choices = c("Todos", municipios), server = TRUE)
  })
  
  # Atualização dos municípios com base no estado selecionado
  observeEvent(input$estado, {
    if ("Todos" %in% input$estado || is.null(input$estado)) {
      municipios <- unique(CTF_BRASIL$Municipio[CTF_BRASIL$Região == input$regiao])
    } else {
      municipios <- unique(CTF_BRASIL$Municipio[CTF_BRASIL$Estado %in% input$estado])
    }
    updateSelectizeInput(session, "municipio", choices = c("Todos", municipios), server = TRUE)
  })
  
  # Aplicar filtros e renderizar o mapa para a aba SISSOLO
  observeEvent(input$filtrar_sissolo, {
    data <- SISSOLO %>%
      filter(
        (input$regiao_sissolo == "Todos" | Regiao == input$regiao_sissolo) &
          (input$classificacao == "Todos" | DS_SUBTIPO_CLASSIFICACAO == input$classificacao) &
          (input$contaminante == "Todos" | NO_CONTAMINANTE == input$contaminante)
      )
    
    # Remover linhas com valores ausentes nas coordenadas
    data <- data %>% filter(!is.na(NU_LONGITUDE) & !is.na(NU_LATITUDE))
    
    # Identificar pontos fora do Brasil
    data_sf <- st_as_sf(data, coords = c("NU_LONGITUDE", "NU_LATITUDE"), crs = 4326, remove = FALSE)
    dentro_brasil <- st_within(data_sf, brasil_polygon, sparse = FALSE)
    data_sf$fora_brasil <- !dentro_brasil
    
    # Filtragem adicional para coordenadas com erro
    if (input$coord_erro_sissolo == "Coordenadas com Erro") {
      data_sf <- data_sf %>% filter(fora_brasil)
    } else if (input$coord_erro_sissolo == "Coordenadas sem Erro") {
      data_sf <- data_sf %>% filter(!fora_brasil)
    }
    
    # Verificar se ainda há dados após a filtragem
    if (nrow(data_sf) > 0) {
      output$sissolo_map <- renderLeaflet({
        leaflet(data = data_sf) %>%
          addTiles() %>%
          addCircleMarkers(
            lng = ~NU_LONGITUDE, lat = ~NU_LATITUDE, 
            popup = ~paste("Endereço:", DS_ENDERECO, "<br>", 
                           "Tamanho da Área:", NU_TAMANHO_AREA, "<br>", 
                           "Código do Município:", CO_MUNICIPIO_IBGE, "<br>",
                           "Município:", Municipio, "<br>",
                           "UF:", UF),
            color = ~ifelse(fora_brasil, cor_fora_limite, "red"),
            radius = 5,
            fillOpacity = 0.7,
            clusterOptions = markerClusterOptions()
          )
      })
    } else {
      # Exibir mensagem intuitiva se não houver dados
      showNotification("Não há resultados para a pesquisa.", type = "warning")
      output$sissolo_map <- renderLeaflet({
        leaflet() %>% addTiles()
      })
    }
  })
  
  # Aplicar filtros e renderizar o mapa para a aba CTF/APP
  observeEvent(input$filtrar, {
    tryCatch({
      # Ajuste para evitar erros de argumento inválido
      estados_filtrados <- if ("Todos" %in% input$estado || is.null(input$estado)) unique(CTF_BRASIL$Estado[CTF_BRASIL$Região == input$regiao]) else input$estado
      municipios_filtrados <- if ("Todos" %in% input$municipio || is.null(input$municipio)) unique(CTF_BRASIL$Municipio[CTF_BRASIL$Região == input$regiao & CTF_BRASIL$Estado %in% estados_filtrados]) else input$municipio
      categorias_filtradas <- if ("Todos" %in% input$categoria || is.null(input$categoria)) unique(CTF_BRASIL$Descricao_da_categoria) else input$categoria
      atividades_filtradas <- if ("Todos" %in% input$atividade || is.null(input$atividade)) unique(CTF_BRASIL$Descricao_da_atividade) else input$atividade
      
      # Filtrar dados de acordo com os inputs
      data <- CTF_BRASIL %>%
        filter(
          (input$regiao == "Todos" | Região == input$regiao) &
            (Estado %in% estados_filtrados) &
            (Municipio %in% municipios_filtrados) &
            (input$potencial == "Todos" | Potencial_de_Poluicao_da_atividade == input$potencial) &
            (Descricao_da_categoria %in% categorias_filtradas) &
            (Descricao_da_atividade %in% atividades_filtradas) &
            (input$situacao == "Todos" | Situacao_cadastral == input$situacao)
        )
      
      # Remover linhas com valores ausentes nas coordenadas
      data <- data %>% filter(!is.na(Longitude) & !is.na(Latitude))
      
      # Identificar pontos fora do Brasil
      data_sf <- st_as_sf(data, coords = c("Longitude", "Latitude"), crs = 4326, remove = FALSE)
      dentro_brasil <- st_within(data_sf, brasil_polygon, sparse = FALSE)
      data_sf$fora_brasil <- !dentro_brasil
      
      # Filtragem adicional para coordenadas com erro
      if (input$coord_erro == "Coordenadas com Erro") {
        data_sf <- data_sf %>% filter(fora_brasil)
      } else if (input$coord_erro == "Coordenadas sem Erro") {
        data_sf <- data_sf %>% filter(!fora_brasil)
      }
      
      # Verificar se ainda há dados após a filtragem
      if (nrow(data_sf) > 0) {
        output$map <- renderLeaflet({
          leaflet(data = data_sf) %>%
            addTiles() %>%
            addCircleMarkers(
              lng = ~Longitude, lat = ~Latitude,
              popup = ~paste("CNPJ:", CNPJ, "<br>",
                             "Município:", Municipio, "<br>",
                             "Estado:", Estado, "<br>",
                             "Potencial de Poluição:", Potencial_de_Poluicao_da_atividade, "<br>",
                             "Categoria:", Descricao_da_categoria, "<br>",
                             "Descrição da Atividade:", Descricao_da_atividade, "<br>",
                             "Situação Cadastral:", Situacao_cadastral),
              color = ~ifelse(fora_brasil, cor_fora_limite, "red"),
              radius = 5,
              fillOpacity = 0.7,
              clusterOptions = markerClusterOptions()
            )
        })
      } else {
        # Exibir mensagem intuitiva se não houver dados
        showNotification("Não há resultados para a pesquisa.", type = "warning")
        output$map <- renderLeaflet({
          leaflet() %>% addTiles()
        })
      }
    }, error = function(e) {
      showNotification(paste("Erro ao aplicar filtros:", e$message), type = "error")
    })
  })
}

shinyApp(ui, server)
